generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String  @unique
  name     String
  email    String? @unique
  imageUrl String
  isAdmin  Boolean @default(false)

  createdAt DateTime @default(now())

  phone   String?
  address String?

  cartItems CartItem[]
  wishList  String[]
  orders    Order[]
}

model CartItem {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  cartId String @unique

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId

  createdAt DateTime @default(now())

  variant   Variant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String?  @db.ObjectId
  quantity  Int
}

model Product {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  slug String @unique

  quantity   Int
  price      Float
  offerPrice Float?

  photos     String[]
  categories String[]

  description String

  createdAt DateTime @default(now())

  variants   Variant[]
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model Variant {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  photo      String?
  price      Float?
  offerPrice Float?
  size       String?
  color      String[]
  quantity   Int

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId

  cartItems  CartItem[]
  orderItems OrderItem[]
}

model Category {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String

  subCategories String[]
}

model Color {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  hex  String @unique
  name String @unique
}

model Size {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String @unique
}

model Order {
  id      String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNo Int
  status  OrderStatus

  createdAt DateTime @default(now())

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String      @db.ObjectId
  orderItems OrderItem[]
}

model OrderItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String @db.ObjectId

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId

  quantity Int

  variant   Variant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String?  @db.ObjectId
}

model StripeCustomer {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hero {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  image      String
  categories String[]
}

model CategoryHero {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  image      String
  categories String[]
}

enum OrderStatus {
  WAITING_FOR_PAYMENT
  DELIVERY_PENDING
  CANCELED
  DELIVERED
}
